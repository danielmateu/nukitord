generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servers   Server[]
  members   Member[]
  channels  Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @unique
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]

  @@index([profileId])
}

model Member {
  id                    String           @id @default(uuid())
  role                  MemberRole       @default(GUEST)
  profileId             String
  serverId              String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  profile               Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages              DiscordMessage[]
  conversationInitiated Conversation[]   @relation("MemberOne")
  conversationReceived  Conversation[]   @relation("MemberTwo")
  directMessages        DirectMessage[]

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String           @id @default(uuid())
  name      String
  type      ChannelType      @default(TEXT)
  profileId String
  serverId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  DiscordMessage[]

  @@index([profileId])
  @@index([serverId])
}

model DiscordMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String       @db.Text
  fileUrl        String?      @db.Text
  memberId       String
  conversationId String
  cretedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([memberId])
}

model Category {
  id    String @id @default(uuid())
  name  String
  Dudes Dude[]
}

model Dude {
  id           String    @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String    @db.Text
  description  String
  instructions String    @db.Text
  seed         String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  messages     Message[]

  @@index([categoryId])
}

model UserSubscription {
  id                     String    @id
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model UserApiLimit {
  id        String   @id
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dudeId    String
  userId    String
  dude      Dude     @relation(fields: [dudeId], references: [id], onDelete: Cascade)

  @@index([dudeId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum Role {
  user
  system
}
